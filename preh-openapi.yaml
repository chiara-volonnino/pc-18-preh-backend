openapi: "3.0.2"

info:
  title: "Pre-Hospital"
  version: "1"
  description: |
    <p>A RESTful API to interact with Events, Missions and Patients.</p>
    <p>An <b>Event</b> represents an accident or a crash, therefore it's distinguished by an address, a call time, a dispatch code and other details; for every Event one or more rescue missions can start off.</p>
    <p>Every <b>Mission</b> is associated to one vehicle and one Patient, and it keeps track of all the times and places concerning the movement of the rescue vehicle.</p>
    <p>For every <b>Patient</b> it's possible to retrieve and update in real time its personal data, anagraphics, its current status, its current and previous vital parameters, administered drugs, performed maneuvers, performed treatments, and the eventual complications that happened in itinere.</p>

paths:
  '/events':
    post:
      tags: 
        - "Events"
      description: "A new event will be created and its identifier will be returned as plain text."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventInformation"
              required:
                - callTime
                - address
      responses:
        '201':
          description: "event successfully created"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        '500':
          description: "server error"
  
    get:
      tags: 
        - "Events"
      description: "Returns two lists: one with all the missions' identifiers and one with all the missions' URI. The query parameter 'after', 'before' and 'ongoing' can be used to filter the results."
      parameters:
        - in: query
          name: "after"
          description: "the date-time after which consider the events to retrieve"
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: "before"
          description: "the date-time before which consider the events to retrieve"
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: "ongoing"
          description: "true if the event is still ongoing: an event is considered ongoing if at least one of its missions is still ongoing"
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      $ref: "#/components/schemas/Identifier"
                  links:
                    type: array
                    items:
                      type: string
                      format: URI-reference
                      example: "/events/d290f1ee-6c54-4b01-90e6-d701748f0851"
        '204':
          description: "no content"
        '404':
          description: "event not found"
        '500':
          description: "server error"
        
  '/events/{eventId}':
    patch:
      tags: 
        - "Events"
      description: "Updates the information about the event."
      parameters:
        - $ref: "#/components/parameters/event-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventInformation"
      responses:
        '204':
          description: "event's information successfully patched"
        '400':
          description: "bad parameters"
        '404':
          description: "event not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Events"
      description: "Retrieves all the available information about the event"
      parameters:
        - $ref: "#/components/parameters/event-id-param"
      responses:
        '200':
          description: "event's information successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventInformation"
        '404':
          description: "event not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Events"
      description: "Deletes the event."
      parameters:
        - $ref: "#/components/parameters/event-id-param"
      responses:
        '204':
          description: "event successfully deleted"
        '404':
          description: "event not found"
        '500':
          description: "server error"
          
  '/missions':
    post:
      tags: 
        - "Missions"
      description: "A new mission will be created and its identifier will be returned as plain text. The mission's 'ongoing' propertiy is automatically set to true."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  $ref: "#/components/schemas/Identifier"
                vehicle:
                  type: string
                  example: "chopper-bravo1"
      responses:
        '201':
          description: "mission successfully created"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        '500':
          description: "server error"
          
    get:
      tags: 
        - "Missions"
      description: "Returns two lists: one with all the missions' identifiers and one with all the missions' URI. Query parameters 'ongoing' and 'vehicle' can be used to narrow down the results."
      parameters:
        - in: query
          name: "ongoing"
          description: "true if the mission is still ongoing."
          required: false
          schema:
            type: boolean
        - in: query
          name: "vehicle"
          description: "the name of the vehicle involved in the mission."
          required: false
          schema:
            type: string
            example: "chopper-bravo1"
      responses:
        '200':
          description: "missions successfully retrieved"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      $ref: "#/components/schemas/Identifier"
                  links:
                    type: array
                    items:
                      type: string
                      format: URI-reference
                      example: "/missions/d290f1ee-6c54-4b01-90e6-d701748f0851"
        '204':
          description: "no content"
        '500':
          description: "server error"
          
  '/missions/{missionId}':
    get:
      tags: 
        - "Missions"
      description: "Returns the mission's details, including the return information and the movement tracking."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      responses:
        '200':
          description: "mission information successfully retrieved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventId:
                    $ref: "#/components/schemas/Identifier"
                  vehicle:
                    type: string
                    example: "chopper-bravo1"
                  returnInformation:
                    $ref: "#/components/schemas/MissionReturnInformation"
                  tracking:
                    $ref: "#/components/schemas/MissionTracking"
                  ongoing:
                    type: boolean
        '404':
          description: "mission not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Missions"
      description: "Deletes the desired mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      responses:
        '204':
          description: "mission successfully deleted"
        '404':
          description: "mission not found"
        '500':
          description: "server error"
  
  
  '/missions/{missionId}/return-information':
    put:
      tags: 
        - "Missions"
      description: "Updates the return information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MissionReturnInformation"
      responses:
        '204':
          description: "mission return information successfully updated"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "mission not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Missions"
      description: "Retrieves the return information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      responses:
        '200':
          description: "mission return information successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissionReturnInformation"
        '204':
          description: "no content"
        '404':
          description: "mission not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Missions"
      description: "Deletes the return information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      responses:
        '204':
          description: "mission return information successfully deleted"
        '400':
          description: "bad parameters"
        '404':
          description: "mission not found"
        '500':
          description: "server error"
  
  '/missions/{missionId}/tracking':
    get:
      tags: 
        - "Missions"
      description: "Retrieves the tracking information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      responses:
        '200':
          description: "tracking information successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissionTracking"
        '204':
          description: "no content"
        '404':
          description: "mission not found"
        '500':
          description: "server error"
    
  '/missions/{missionId}/tracking/{trackingStep}':
    put:
      tags: 
        - "Missions"
      description: "Updates the return information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
        - $ref: "#/components/parameters/tracking-step-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MissionTrackingItem"
      responses:
        '204':
          description: "mission tracking successfully updated"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "mission not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Missions"
      description: "Retrieves the specific tracking step information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
        - $ref: "#/components/parameters/tracking-step-param"
      responses:
        '200':
          description: "mission tracking step information successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissionTrackingItem"
        '204':
          description: "no content"
        '404':
          description: "mission not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Missions"
      description: "Deletes the tracking step information about the mission."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
        - $ref: "#/components/parameters/tracking-step-param"
      responses:
        '204':
          description: "mission tracking step information successfully deleted"
        '404':
          description: "tracking step not found"
        '500':
          description: "server error"
  
  '/missions/{missionId}/tracking/ongoing':
    put:
      tags: 
        - "Missions"
      description: "Tells if the mission is ongoing or not."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      requestBody:
        content:
          text/plain:
            schema:
              type: boolean
              example: true
      responses:
        '204':
          description: "mission ongoing value successfully updated"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "mission not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Missions"
      description: "Tells if the mission is still ongoing or not."
      parameters:
        - $ref: "#/components/parameters/mission-id-param"
      responses:
        '200':
          description: "ok"
          content:
            text/plain:
              schema:
                type: boolean
                example: false
        '404':
          description: "mission not found"
        '500':
          description: "server error"

  '/patients':
    post:
      tags: 
        - "Patients"
      description: "By passing in the anagraphic data in the request body, a new patient will be added and its identifier will be returned as plain text."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignedEvent:
                  $ref: "#/components/schemas/Identifier"
                assignedMission:
                  $ref: "#/components/schemas/Identifier"
                anagraphic:
                  $ref: "#/components/schemas/Anagraphic"
      responses:
        '201':
          description: "a new Pre-H patient has been registered"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad request"
        '500':
          description: "server error"
    get:
      tags: 
        - "Patients"
      description: "Retrieve all the patients. The query parameter 'after' and 'before' can be used to filter the results."
      parameters:
        - in: query
          name: "after"
          description: "the date-time (of taking-care) after which consider the patients to retrieve"
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: "before"
          description: "the date-time (of taking-care) before which consider the patients to retrieve"
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: "missionId"
          description: "the identifier of the mission relative to the patient"
          schema:
            $ref: "#/components/schemas/Identifier"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      $ref: "#/components/schemas/Identifier"
                  links:
                    type: array
                    items:
                      type: string
                      format: URI-reference
                      example: "/events/d290f1ee-6c54-4b01-90e6-d701748f0851"
        '404':
          description: "event not found"
        '500':
          description: "server error"
        
  '/patients/{patientId}/anagraphic':
    put:
      tags: 
        - "Patients"
      description: "Updates the anagraphic data for the desired patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Anagraphic"
      responses:
        '204':
          description: "anagraphic data successfully updated"
        '400':
          description: "bad request"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can search for its anagraphic information."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Anagraphic"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/status':
    put:
      tags: 
        - "Patients"
      description: "Updates the patient's status."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientStatus"
      responses:
        '204':
          description: "patient's status successfully updated"
        '400':
          description: "bad request"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can search for its status."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientStatus"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/vital-parameters':
    post:
      tags: 
        - "Patients"
      description: "Submit a new snapshot of the patient's vital parameters."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VitalParameters"
      responses:
        '201':
          description: "patient's vital parameters successfully uploaded"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
          
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can search for its vital parameters' history."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '201':
          description: "ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VitalParameters"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/vital-parameters/{vitalParametersId}':
    put:
      tags: 
        - "Patients"
      description: "By passing in the identifiers of the patient and the vital parameters snapshot, you can update the snapshot values."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/vital-parameters-id-param"
      responses:
        '204':
          description: "vital parameters updated"
        '400':
          description: "bad request"
        # '404':
        #   description: "not found"
        '500':
          description: "server error"
          
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can search for its latest vital parameters registered."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/vital-parameters-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VitalParameters"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "By passing in the identifiers of the patient and the vital parameters snapshot, you can delete the snapshot."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/vital-parameters-id-param"
      responses:
        '204':
          description: "vital parameters snapshot deleted"
        '404':
          description: "not found"
        '500':
          description: "server error"
    
  '/patients/{patientId}/vital-parameters/last':
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can search for its latest vital parameters registered."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VitalParameters"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/drugs':
    post:
      tags: 
        - "Patients"
      description: "Submit a new drug administration for the patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drug"
      responses:
        '201':
          description: "patient's drug administered successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Patients"
      description: "Retrieve all the drugs administered to the patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drug"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/drugs/{drugId}':  
    get:
      tags: 
        - "Patients"
      description: "Retrieve the requested drug administered to the patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/drug-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drug"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Removes the requested drug."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/drug-id-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/maneuvers':
    get:
      tags: 
        - "Patients"
      description: "Retrieves the summary of all the maneuvers performed on the patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  simple:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimpleManeuver"
                  pacing:
                    type: array
                    items:
                      $ref: "#/components/schemas/PacingManeuver"
        '204':
          description: "no content: no maneuvers executed on the requested patient"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/maneuvers/simple/{simpleManeuver}':
    post:
      tags: 
        - "Patients"
      description: "Registers a maneuver's execution time"
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/simple-maneuver-param"
      requestBody:
        content:
          plain/text:
            schema:
              type: string
              format: date-time
      responses:
        '201':
          description: "patient's maneuver execution registered successfully"
        # '404':
        #   description: "patient not found"
        '409':
          description: "conflict: maneuver already executed"
        '500':
          description: "server error"
  
    get:
      tags: 
        - "Patients"
      description: "Retrieves the maneuver's execution time."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/simple-maneuver-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: string
                format: date-time
        '404':
          description: "not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Cancels the maneuver execution"
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/simple-maneuver-param"
      responses:
        '204':
          description: "deletion completed"
        '404':
          description: "not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/maneuvers/pacing':
    post:
      tags: 
        - "Patients"
      description: "Registers a transcutaneous pacing execution"
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PacingManeuver"
      responses:
        '201':
          description: "patient's maneuver executed successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
  
    get:
      tags: 
        - "Patients"
      description: "Retrieves a specific transcutaneous pacing execution."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/pacing-maneuver-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PacingManeuver"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/maneuvers/pacing/{pacingManeuverId}':
    get:
      tags: 
        - "Patients"
      description: "Retrieves a specific transcutaneous pacing execution."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/pacing-maneuver-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PacingManeuver"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Deletes a specific transcutaneous pacing execution."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/pacing-maneuver-id-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/treatments/':
    get:
      tags: 
        - "Patients"
      description: "Retrieve all the treatments performed for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  simple:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimpleTreatment"
                  timed:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimpleTreatment"
                  injection:
                    type: array
                    items:
                      $ref: "#/components/schemas/InjectionTreatment"
                  ippv:
                    type: array
                    items:
                      $ref: "#/components/schemas/IppvTreatment"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  
  '/patients/{patientId}/treatments/simple':
    post:
      tags: 
        - "Patients"
      description: "Records a new simple treatment (name and time of execution) for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleTreatment"
      responses:
        '201':
          description: "patient's treatment registered successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
          
  '/patients/{patientId}/treatments/simple/{treatmentId}':
    get:
      tags: 
        - "Patients"
      description: "Retrieve a particular simple treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleTreatment"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Deletes a particular simple treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/treatments/timed':
    post:
      tags: 
        - "Patients"
      description: "Records a new timed treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimedTreatment"
      responses:
        '201':
          description: "patient's treatment registered successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "treatment not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/treatments/timed/{treatmentId}':
    patch:
      tags: 
        - "Patients"
      description: "Updates a timed treatment for a patient; especially useful to specify the ending time of the treatment."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimedTreatment"
      responses:
        '200':
          description: "patient's treatment updated successfully"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Patients"
      description: "Retrieve a particular timed treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimedTreatment"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Deletes a particular timed treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/treatments/injection':
    post:
      tags: 
        - "Patients"
      description: "Records a new injection treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InjectionTreatment"
      responses:
        '201':
          description: "patient's treatment registered successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"      
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/treatments/injection/{treatmentId}':
    get:
      tags: 
        - "Patients"
      description: "Retrieve a particular injection treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InjectionTreatment"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Deletes a particular injection treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
    
  '/patients/{patientId}/treatments/ippv':
    post:
      tags: 
        - "Patients"
      description: "Records a new ippv treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IppvTreatment"
      responses:
        '201':
          description: "patient's treatment registered successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
  '/patients/{patientId}/treatments/ippv/{treatmentId}':
    get:
      tags: 
        - "Patients"
      description: "Retrieve a particular ippv treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IppvTreatment"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "Deletes a particular ippv treatment for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/treatment-id-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"  
  
  '/patients/{patientId}/complications':
    get:
      tags: 
        - "Patients"
      description: "Retrieve all the complicaitons happened for a patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Complication"
        '404':
          description: "treatment not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/complications/{complication}':
    post:
      tags: 
        - "Patients"
      description: "Adds a complication that happened in itinere, specifying at what time it happened."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/complication-param"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              format: date-time
      responses:
        '201':
          description: "patient's complication registered successfully"
          headers:
            Location:
              schema:
                type: string
                format: URI-reference
        '400':
          description: "bad parameters"
        '409':
          description: "conflict: complication already registered"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Patients"
      description: "Retrieve the specific complication time if it happened for the patient."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/complication-param"
      responses:
        '200':
          description: "ok"
          content:
            text/plain:
             schema:
               type: string
               format: date-time
        '404':
          description: "not found"
        '500':
          description: "server error"
          
    delete:
      tags: 
        - "Patients"
      description: "Removes the specified complication in itinere"
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/complication-param"
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/notes':
    put:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can update the textual notes associated with him/her."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        '204':
          description: "patient's textual notes successfully updated"
        '400':
          description: "bad parameters"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
      
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can retrieve the textual notes associated with him/her."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
      responses:
        '200':
          description: "ok"
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: "patient not found"
        '500':
          description: "server error"
  
  '/patients/{patientId}/{multimedia}':
    post:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can add a multimedia note associated with him/her between: images, audio, video."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/multimedia-param"
      requestBody:
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/MultimediaContent"
      responses:
        '201':
          description: "multimedia successfully uploaded"
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/Identifier"
        # '404':
        #   description: "patient not found"
        '500':
          description: "server error"
    
    get:
      tags: 
        - "Patients"
      description: "By passing in the patient's identifier, you can retrieve all the multimedia notes choosing between: images, audio, video"
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/multimedia-param"
      responses:
        '201':
          description: "multimedia note successfully uploaded"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/Identifier"
                    content:
                      $ref: "#/components/schemas/MultimediaContent"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
          
  '/patients/{patientId}/{multimedia}/{multimediaId}':
    get:
      tags: 
        - "Patients"
      description: "By passing in the identifiers of the patient and the multimedia note, you can retrieve the desired note."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/multimedia-param"
        - $ref: "#/components/parameters/multimedia-id-param"

      responses:
        '201':
          description: "multimedia note successfully retrieved"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/MultimediaContent"
        '404':
          description: "patient not found"
        '500':
          description: "server error"
    
    delete:
      tags: 
        - "Patients"
      description: "By passing in the identifiers of the patient and the multimedia note, you can remove the desired note."
      parameters:
        - $ref: "#/components/parameters/patient-id-param"
        - $ref: "#/components/parameters/multimedia-param"
        - $ref: "#/components/parameters/multimedia-id-param"

      responses:
        '204':
          description: "multimedia note successfully removed"
        '404':
          description: "patient not found"
        '500':
          description: "server error"

components:
  parameters:
    event-id-param:
      in: path
      name: "eventId"
      description: "identifier of the event"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
    
    mission-id-param:
      in: path
      name: "missionId"
      description: "identifier of the mission"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
    
    tracking-step-param:
      in: path
      name: "trackingStep"
      description: "the name of the single tracking step during a mission"
      required: true
      schema:
        type: string
        enum:
          - "oc-call"
          - "crew-departure"
          - "arrival-onsite"
          - "departure-onsite"
          - "landing-helipad"
          - "arrival-er"
    
    patient-id-param:
      in: path
      name: "patientId"
      description: "identifier of the patient"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
        
    vital-parameters-id-param:
      in: path
      name: "vitalParametersId"
      description: "identifier of a certain snapshot of the vital parameters"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
        
    drug-id-param:
      in: path
      name: "drugId"
      description: "identifier of a certain drug admnistration"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
        
    simple-maneuver-param:
      in: path
      name: "simpleManeuver"
      description: "name of the desired maneuver"
      required: true
      schema:
        $ref: "#/components/schemas/SimpleManeuverName"
        
    pacing-maneuver-id-param:
      in: path
      name: "pacingManeuverId"
      description: "identifier of the pacing maneuver execution"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
    
    treatment-id-param:
      in: path
      name: "treatmentId"
      description: "identifier of a certain treatment administration"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
        
    complication-param:
      in: path
      name: "complication"
      description: "name of the desired complication"
      required: true
      schema:
        $ref: "#/components/schemas/ComplicationName"
    
    multimedia-id-param:
      in: path
      name: "multimediaId"
      description: "identifier of the multimedia file"
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
        
    multimedia-param:
      in: path
      name: "multimedia"
      description: "multimedia types"
      required: true
      schema:
        type: string
        enum:
          - "images"
          - "audio"
          - "video"

  schemas:
    Identifier:
      type: string
      format: UUID
      example: "d290f1ee-6c54-4b01-90e6-d701748f0851"

    EventInformation:
      type: object
      properties:
        callTime:
          type: string
          format: date-time
        address:
          type: string
        notes:
          type: string
          example: "The patient switches between the state of consciousness and unconsciousness continuously."
        dispatchCode:
          type: string
          example: 'SC01R'
        secondary:
          type: boolean
        dynamic:
          type: string
          example: "Road accident: pedestrian ran over"
        patientsNumber:
          type: integer
          example: 1
        ongoing:
          type: boolean
    
    MissionReturnInformation:
      type: object
      properties:
        returnCode:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
        returnHospital:
          type: string
          enum:
            - "Cesena"
            - "Faenza"
            - "Forlì"
            - "Ravenna"
            - "Rimini"
        returnReleaseSite:
          description: "the release site inside the Hospital of return"
          type: string
          enum:
            - "Emergency Room"
            - "Surgery"
    
    MissionTrackingItem:
      type: object
      required:
        - datetime
        - place
      properties:
        datetime:
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        place:
          type: string
          example: 'Via Cervese 123'
    
    MissionTracking:
      type: object
      properties:
          ocCall:
            $ref: '#/components/schemas/MissionTrackingItem'
          crewDeparture:
            $ref: '#/components/schemas/MissionTrackingItem'
          landingOnsite:
            $ref: '#/components/schemas/MissionTrackingItem'
          takeoffOnsite:
            $ref: '#/components/schemas/MissionTrackingItem'
          landingHelipad:
            $ref: '#/components/schemas/MissionTrackingItem'
          arrivalEr:
            $ref: '#/components/schemas/MissionTrackingItem'
    
    Anagraphic:
      type: object
      properties:
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        residency:
          type: string
          example: "Via della Madonnina 123, Arezzo"
        birthPlace:
          type: string
          example: "Cesena"
        birthDate:
          type: string
          format: date
          example: "1985-04-12"
        gender:
          type: string
          example: "M"
        anticoagulants:
          type: boolean
        antiplatelets:
          type: boolean
    
    PatientStatus:
      type: object
      required:
        - traumaticCondition
        - closedTrauma
        - penetratingTrauma
        - helmetSeatbelt
        - externalHaemorrhage
        - respiratoryTract
        - tachypneaDyspnoea
        - thoraxDeformities
        - ecofast
        - deformedPelvis
        - amputation
        - sunkenSkullFracture
        - otorrhagia
        - paraparesis
        - tetraparesis
        - paraesthesia
        - time
      properties:
        traumaticCondition:
          type: boolean
        closedTrauma:
          type: boolean
        penetratingTrauma:
          type: boolean
        helmetSeatbelt:
          type: boolean
        externalHaemorrhage:
          type: boolean
        respiratoryTract:
          type: boolean
        tachypneaDyspnoea:
          type: boolean
        thoraxDeformities:
          type: boolean
        ecofast:
          type: boolean
        deformedPelvis:
          type: boolean
        amputation:
          type: boolean
        sunkenSkullFracture:
          type: boolean
        otorrhagia:
          type: boolean
        paraparesis:
          type: boolean
        tetraparesis:
          type: boolean
        paraesthesia:
          type: boolean
        time:
          type: string
          format: date-time
          
    VitalParameters:
      type: object
      required:
        - respiratoryTract
        - breathingRate
        - outlyingSaturation
        - heartbeatRate
        - heartbeatType
        - bloodPressure
        - capRefillTime
        - skinColor
        - eyeOpening
        - verbalResponse
        - motorResponse
        - leftPupil
        - rightPupil
        - leftPhotoReactive
        - rightPhotoReactive
        - temperatureInCelsius
        - time
      properties:
        respiratoryTract:
          type: string
          enum:
            - "open"
            - "closed"
        breathingRate:
          type: string
          enum:
            - "<10"
            - "10-29"
            - ">29"
        outlyingSaturationPercentage:
          type: integer
        heartbeatRate:
          type: integer
        heartbeatType:
          type: string
          enum:
            - "rithmic"
            - "arithmic"
        bloodPressure:
          type: integer
        capRefillTime:
          type: string
          enum:
            - "normal"
            - "augmented"
            - "none"
        skinColor:
          type: string
          enum:
            - "normal"
            - "pale"
            - "cyanotic"
        eyeOpening:
          type: string
          enum:
            - "4 - Spontaneous"
            - "3 - Sound stimuli"
            - "2 - Pressure stimuli"
            - "1 - None"
            - "ND - Not definable"
        verbalResponse:
          type: string
          enum:
            - "5 - Oriented"
            - "4 - Confused"
            - "3 - Words"
            - "2 - Sounds"
            - "1 - None"
            - "ND - Not definable"
        motorResponse:
          type: string
          enum:
            - "6 - Executes orders"
            - "5 - Localizes"
            - "4 - Normal flexion"
            - "3 - Abnormal flexion"
            - "2 - Extension"
            - "1 - None"
            - "ND - Not definable"
        leftPupil:
          type: string
          enum:
            - "Miosis"
            - "Mydriasis"
            - "Normal"
        rightPupil:
          type: string
          enum:
            - "Miosis"
            - "Mydriasis"
            - "Normal"
        leftPhotoReactive:
          type: boolean
        rightPhotoReactive:
          type: boolean
        temperatureInCelsius:
          type: number
        time:
          type: string
          format: date-time
    
    Drug:
      type: object
      properties:
        name:
          type: string
          enum:
            - "crystalloids"
            - "mannitol"
            - "hypertonic-solution"
            - "packed-red-blood-cells"
            - "fibrinogen"
            - "succinylcholine"
            - "midazolam"
            - "fentanyl"
            - "ketamine"
            - "curare"
            - "tranexamic-acid"
        quantity:
          type: number
          example: 500
        measurementUnit:
          type: string
          example: "ml" 
        time:
          type: string
          format: date-time

    SimpleManeuver:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/SimpleManeuverName"
        time:
          type: string
          format: date-time
    SimpleManeuverName:
      type: string
      enum:
        - "cervical-collar"
        - "immobilisation"
        - "electrical-cardioversion"
        - "feeding-tube"
        - "vesical-catheter"

    PacingManeuver:
      type: object
      properties:
        captureRateInBpm:
          type: integer
        amperageInMilliAmps:
          type: number
        time:
          type: string
          format: date-time
    
    SimpleTreatment:
      type: object
      properties:
        name:
          type: string
          enum:
            - "adrenalin"
            - "shock"
            - "jaw-subluxation"
            - "guedel"
            - "cricothyrotomy"
            - "tracheal-tube"
            - "oxygen-therapy"
            - "ambu"
            - "mini-thoracotomy-left"
            - "mini-thoracotomy-right"
            - "ippv"
            - "haemostasis"
            - "pelvic-binder"
            - "neuroprotection"
            - "thermal-protection"
        time:
          type: string
          format: date-time
    
    TimedTreatment:
      type: object
      properties:
        name:
          type: string
          enum:
            - "reanimation"
            - "tourniquet"
            - "reboa-zone-1"
            - "reboa-zone-3"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    
    InjectionTreatment:
      type: object
      properties:
        name:
          type: string
          enum:
            - "peripheral"
            - "central"
            - "intreosseus"
        caliber:
          type: string
        time:
          type: string
          format: date-time
    
    IppvTreatment:
      type: object
      properties:
        vt:
          type: number
        fr:
          type: integer
        peep:
          type: integer
        fio2:
          type: number
        time:
          type: string
          format: date-time
    
    Complication:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ComplicationName"
        time:
          type: string
          format: date-time
    ComplicationName:
      type: string
      enum:
        - "cardio-circulatory-arrest"
        - "impaired-consciousness"
        - "anisocoria-mydriasis"
        - "respiratory-failure"
        - "cardiovascular-shock"
        - "landing-in-itinere"
        - "demise-in-itinere"
        - "demise-in-ps"
          
    MultimediaContent:
      type: string
      format: base64
      example: "SW5kaWEgVGVhbSB3aWxsIHdpbiB0aGUgQ3Vw3aWxsIHdpbiB05kaWEgVGVh"